<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="7ca8ac02-b3f5-4962-a9c8-db41466a160a" activeEnvironment="Default" name="garanti-cepbank" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="6bc4f65a-a675-4db5-9870-7271ad5ed1a9" port="8888" path="/cepbankMobile" host="Esma-PC" name="garanti-cepbank-mock" docroot=""><con:settings/><con:properties/><con:restMockAction name="getunitinfo.json" method="POST" resourcePath="/getunitinfo.json" id="281bd3f0-265c-4a60-9ca4-b9b00e700225"><con:settings/><con:defaultResponse>getunitinforesponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="response" id="1d62e5f5-21c5-4819-90ca-f8e892db19c4" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "unitList": [
        {
            "code": "01317CRS001",
            "name": "KEMER BAGLI SUBE         ",
            "address": "ATATURK CADDESI NO:18/A 07980                     ",
            "city": "ANTALYA",
            "town": "KEMER",
            "model": "NCR BNAY       ",
            "hasEnv": "H",
            "hasCoin": "E",
            "hasCashPayment": "E",
            "hasUsd": "H",
            "hasEur": "H",
            "hasGbp": "H",
            "latitude": "36.599308",
            "longitude": "30.561323",
            "openTime": 0,
            "closeTime": 0,
            "hasUsdCashPayment": "E",
            "unitType": "atm",
            "distance": 0.03
        },
        {
            "code": 1317,
            "name": "KEMER BAGLI SUBE",
            "type": "T",
            "address1": "Ataturk Caddesi No: 18 / A 07980",
            "address2": "",
            "address3": "",
            "zipCode": 7980,
            "areaCode": 242,
            "telephone": "8143398",
            "fax": "8143506",
            "cityCode": "007",
            "townCode": "00014",
            "cityName": "ANTALYA        ",
            "townName": "KEMER",
            "latitude": "36.600335337588",
            "longitude": "30.560574531555",
            "openAfternoon": "H",
            "afternoonHours": "(12:30-13:30)",
            "unitType": "branch",
            "distance": 0.16
        },
        {
            "code": "00904CRS056",
            "name": "KEMER MARINA             ",
            "address": "KEMER YAT LIMANI LIMAN CADDESI                    ",
            "city": "ANTALYA",
            "town": "KEMER",
            "model": "NCR BNAY       ",
            "hasEnv": "H",
            "hasCoin": "E",
            "hasCashPayment": "E",
            "hasUsd": "E",
            "hasEur": "E",
            "hasGbp": "H",
            "latitude": "36.599775",
            "longitude": "30.563361",
            "openTime": 0,
            "closeTime": 0,
            "hasUsdCashPayment": "N",
            "unitType": "atm",
            "distance": 0.17
        },
        {
            "code": "00904CRS072",
            "name": "KEMER OTTIMO             ",
            "address": "OTTIMO AVM KEMER                                  ",
            "city": "ANTALYA",
            "town": "KEMER",
            "model": "NCR BNAY       ",
            "hasEnv": "H",
            "hasCoin": "E",
            "hasCashPayment": "E",
            "hasUsd": "E",
            "hasEur": "E",
            "hasGbp": "H",
            "latitude": "36.605408",
            "longitude": "30.558983",
            "openTime": 0,
            "closeTime": 0,
            "hasUsdCashPayment": "N",
            "unitType": "atm",
            "distance": 0.74
        },
        {
            "code": "00352CRS002",
            "name": "KEMER SUBE-1             ",
            "address": "YENI MAHALLE DORTYOL BULVARI NO:26 0798           ",
            "city": "ANTALYA",
            "town": "KEMER",
            "model": "NCR BNAY       ",
            "hasEnv": "H",
            "hasCoin": "E",
            "hasCashPayment": "E",
            "hasUsd": "E",
            "hasEur": "E",
            "hasGbp": "H",
            "latitude": "36.600782",
            "longitude": "30.552861",
            "openTime": 0,
            "closeTime": 0,
            "hasUsdCashPayment": "N",
            "unitType": "atm",
            "distance": 0.8
        },
        {
            "code": "00352CRS004",
            "name": "KEMER SUBE-2             ",
            "address": "YENI MAHALLE DORTYOL BUL.                         ",
            "city": "ANTALYA",
            "town": "KEMER",
            "model": "NCR BNAY       ",
            "hasEnv": "H",
            "hasCoin": "E",
            "hasCashPayment": "E",
            "hasUsd": "H",
            "hasEur": "H",
            "hasGbp": "H",
            "latitude": "36.600782",
            "longitude": "30.552861",
            "openTime": 0,
            "closeTime": 0,
            "hasUsdCashPayment": "N",
            "unitType": "atm",
            "distance": 0.8
        },
        {
            "code": 352,
            "name": "KEMER",
            "type": "T",
            "address1": "Yeni Mahalle Dortyol Bulvari No: 26 07980",
            "address2": "",
            "address3": "",
            "zipCode": 7980,
            "areaCode": 242,
            "telephone": "8135350",
            "fax": "8145564",
            "cityCode": "007",
            "townCode": "00014",
            "cityName": "ANTALYA        ",
            "townName": "KEMER",
            "latitude": "36.600301",
            "longitude": "30.551068",
            "openAfternoon": "E",
            "afternoonHours": "(12:30-13:30)",
            "unitType": "branch",
            "distance": 0.95
        }
    ],
    "returnMessage": "OK",
    "returnCode": 0
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="inquiryBalance.json" method="POST" resourcePath="/inquiryBalance.json" id="74b55417-6097-4a67-b626-10f01fb34278"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.*

def slurper = new JsonSlurper()

def req =mockRequest.requestContent
def parsedReq = slurper.parseText(context.expand(req))
def deviceId = parsedReq.deviceId
requestContext.deviceId=deviceId
</con:dispatchPath><con:response name="response" id="8dbc14a9-9f9d-47cd-ae6b-31f91f642568" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "phoneNumber": "5555555555",
    "balance": 6.71,
    "availableBalance": 656.71,
    "deviceId": "${deviceId}",
    "returnMessage": "CepBank hesap ELMA bakiyesi 6,71 TL ,Avans Hesap limiti 650,00 TL ,toplam kullanilabilir bakiyesi 656,71 TL 'dir.",
    "statusCode": 0,
    "channel": null
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="creditCardLead.json" method="POST" resourcePath="/creditCardLead" id="c46f857d-3eae-446a-827f-d499f18a58d7"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="response" id="70125bda-a0b0-4edb-a123-8a090cb9f201" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "returnCode": "0000",
    "explanationText": "Başvurunuz alinmistir."
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="creditLead.json" method="POST" resourcePath="/creditLead" id="0d8ba72d-aae3-423a-b707-b201c1687e4e"><con:settings/><con:defaultResponse>response</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="response" id="486937cc-d02b-4039-ac7e-acac81c34462" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"returnCode": "0000",
    "explanationText": "Bilgileriniz Gonderilmistir."
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="getcurrency.json" method="POST" resourcePath="/getcurrency.json" id="ce9b1b55-da40-4193-b45e-89b36b33e567"><con:settings/><con:defaultResponse>response</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="response" id="0a358b7b-309f-445e-a0a6-bc80b5e2b146" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "date": "09092015",
    "time": "0000",
    "operation": "C",
    "dovizKurlariList": [
        {
            "dovizKodu": "USD",
            "dovizAdi": "Amerikan Doları",
            "alisFiyatiS": "0.00000",
            "satisFiyatiS": "0.00000",
            "alisFiyatiM": "3.01450",
            "satisFiyatiM": "3.01990",
            "alisFiyatiA": "2.98000",
            "satisFiyatiA": "3.04000"
        },
        {
            "dovizKodu": "EUR",
            "dovizAdi": "Euro",
            "alisFiyatiS": "0.00000",
            "satisFiyatiS": "0.00000",
            "alisFiyatiM": "3.36820",
            "satisFiyatiM": "3.37430",
            "alisFiyatiA": "3.33240",
            "satisFiyatiA": "3.39950"
        },
        {
            "dovizKodu": "AUD",
            "dovizAdi": "Avustralya Doları",
            "alisFiyatiS": "2.10640",
            "satisFiyatiS": "2.11700",
            "alisFiyatiM": "2.09910",
            "satisFiyatiM": "2.11280",
            "alisFiyatiA": "2.09090",
            "satisFiyatiA": "2.13300"
        },
        {
            "dovizKodu": "CAD",
            "dovizAdi": "Kanada Doları",
            "alisFiyatiS": "2.27250",
            "satisFiyatiS": "2.28390",
            "alisFiyatiM": "2.27070",
            "satisFiyatiM": "2.28090",
            "alisFiyatiA": "2.25830",
            "satisFiyatiA": "2.30370"
        },
        {
            "dovizKodu": "CHF",
            "dovizAdi": "İsviçre Frangı",
            "alisFiyatiS": "3.06570",
            "satisFiyatiS": "3.08110",
            "alisFiyatiM": "3.08000",
            "satisFiyatiM": "3.09980",
            "alisFiyatiA": "3.04580",
            "satisFiyatiA": "3.10710"
        },
        {
            "dovizKodu": "DKK",
            "dovizAdi": "Danimarka Kronu",
            "alisFiyatiS": "0.45070",
            "satisFiyatiS": "0.45300",
            "alisFiyatiM": "0.45073",
            "satisFiyatiM": "0.45294",
            "alisFiyatiA": "0.44661",
            "satisFiyatiA": "0.45560"
        },
        {
            "dovizKodu": "GBP",
            "dovizAdi": "İngiliz Sterlini",
            "alisFiyatiS": "4.62180",
            "satisFiyatiS": "4.64490",
            "alisFiyatiM": "4.62620",
            "satisFiyatiM": "4.65030",
            "alisFiyatiA": "4.58130",
            "satisFiyatiA": "4.67350"
        },
        {
            "dovizKodu": "JPY",
            "dovizAdi": "100 Japon Yeni",
            "alisFiyatiS": "2.50550",
            "satisFiyatiS": "2.51800",
            "alisFiyatiM": "2.50630",
            "satisFiyatiM": "2.52290",
            "alisFiyatiA": "2.48950",
            "satisFiyatiA": "2.53960"
        },
        {
            "dovizKodu": "NOK",
            "dovizAdi": "Norveç Kronu",
            "alisFiyatiS": "0.36450",
            "satisFiyatiS": "0.36630",
            "alisFiyatiM": "0.36313",
            "satisFiyatiM": "0.36557",
            "alisFiyatiA": "0.36178",
            "satisFiyatiA": "0.36906"
        },
        {
            "dovizKodu": "SAR",
            "dovizAdi": "S. Arabistan Riyali",
            "alisFiyatiS": "0.80040",
            "satisFiyatiS": "0.80440",
            "alisFiyatiM": "0.80374",
            "satisFiyatiM": "0.80519",
            "alisFiyatiA": "0.79144",
            "satisFiyatiA": "0.81386"
        },
        {
            "dovizKodu": "SEK",
            "dovizAdi": "İsveç Kronu",
            "alisFiyatiS": "0.35710",
            "satisFiyatiS": "0.35890",
            "alisFiyatiM": "0.35572",
            "satisFiyatiM": "0.35940",
            "alisFiyatiA": "0.35432",
            "satisFiyatiA": "0.36146"
        }
    ]
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="getActivities.json" method="POST" resourcePath="/getActivities.json" id="657e08c0-2f64-4e27-9d17-f773e8e97274"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.*

def slurper = new JsonSlurper()

def req =mockRequest.requestContent
def parsedReq = slurper.parseText(context.expand(req))
def deviceId = parsedReq.deviceId
requestContext.deviceId=deviceId


</con:dispatchPath><con:response name="response" id="3bca41b3-c42b-4452-8304-90cb507eb06c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "activityList": [
        {
            "accNo": null,
            "cardNo": null,
            "sPhoneNo": "5555555555",
            "refNo": "8848686",
            "date": "24/08/2015 13:30",
            "trnAmnt": 7,
            "trnsType": "S",
            "trnsName": "Para Isteme",
            "status": "I",
            "tst": "2015-08-24-13.30.31.567589",
            "targetNo": "7775555555",
            "cflg": "Y"
        },
        {
            "accNo": null,
            "cardNo": null,
            "sPhoneNo": "5555555555",
            "refNo": "4894597",
            "date": "20/08/2015 17:20",
            "trnAmnt": 8,
            "trnsType": "S",
            "trnsName": "Para Isteme",
            "status": "O",
            "tst": "2015-08-20-17.20.48.318704",
            "targetNo": "4445555555",
            "cflg": "Y"
        },
        {
            "accNo": null,
            "cardNo": null,
            "sPhoneNo": "5555555555",
            "refNo": "9185944",
            "date": "18/08/2015 15:04",
            "trnAmnt": 7,
            "trnsType": "S",
            "trnsName": "Para Isteme",
            "status": "I",
            "tst": "2015-08-18-15.04.41.757376",
            "targetNo": "3335555555",
            "cflg": "Y"
        },
        {
            "accNo": null,
            "cardNo": null,
            "sPhoneNo": "5555555555",
            "refNo": "6225612",
            "date": "18/08/2015 14:59",
            "trnAmnt": 2,
            "trnsType": "S",
            "trnsName": "Para Isteme",
            "status": "I",
            "tst": "2015-08-18-14.59.34.221923",
            "targetNo": "444555555",
            "cflg": "Y"
        },
        {
            "accNo": null,
            "cardNo": null,
            "sPhoneNo": "5555555555",
            "refNo": "0259066",
            "date": "28/07/2015 14:06",
            "trnAmnt": 4,
            "trnsType": "S",
            "trnsName": "Para Isteme",
            "status": "I",
            "tst": "2015-07-28-14.06.53.841440",
            "targetNo": "3335555555",
            "cflg": "Y"
        },
        {
            "accNo": null,
            "cardNo": null,
            "sPhoneNo": "5555555555",
            "refNo": "8120004",
            "date": "28/07/2015 14:01",
            "trnAmnt": 3,
            "trnsType": "S",
            "trnsName": "Para Isteme",
            "status": "I",
            "tst": "2015-07-28-14.01.41.559404",
            "targetNo": "4445555555",
            "cflg": "Y"
        },
        {
            "accNo": null,
            "cardNo": null,
            "sPhoneNo": "5555555555",
            "refNo": "0128576",
            "date": "28/07/2015 14:01",
            "trnAmnt": 2,
            "trnsType": "S",
            "trnsName": "Para Isteme",
            "status": "I",
            "tst": "2015-07-28-14.01.23.500704",
            "targetNo": "6665555555",
            "cflg": "Y"
        },
        {
            "accNo": null,
            "cardNo": null,
            "sPhoneNo": "5555555555",
            "refNo": "1067431",
            "date": "28/07/2015 14:00",
            "trnAmnt": 2,
            "trnsType": "S",
            "trnsName": "Para Isteme",
            "status": "I",
            "tst": "2015-07-28-14.00.57.783140",
            "targetNo": "2225555555",
            "cflg": "Y"
        },
        {
            "accNo": null,
            "cardNo": null,
            "sPhoneNo": "5555555555",
            "refNo": "2430167",
            "date": "27/07/2015 18:43",
            "trnAmnt": 2,
            "trnsType": "S",
            "trnsName": "Para Isteme",
            "status": "I",
            "tst": "2015-07-27-18.43.12.108435",
            "targetNo": "2225555555",
            "cflg": "Y"
        },
        {
            "accNo": null,
            "cardNo": null,
            "sPhoneNo": "5555555555",
            "refNo": "3418485",
            "date": "27/07/2015 09:27",
            "trnAmnt": 4,
            "trnsType": "S",
            "trnsName": "Para Isteme",
            "status": "I",
            "tst": "2015-07-27-09.27.46.857791",
            "targetNo": "2225555555",
            "cflg": "Y"
        }
    ],
    "deviceId": "${deviceId}",
    "returnMessage": "",
    "statusCode": 0,
    "channel": null
} </con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="cardPayment.json" method="POST" resourcePath="/cardPayment.json" id="ffe780ab-a5ed-4e23-9581-ffdbe2ad987d"><con:settings/><con:defaultResponse>response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.*

def slurper = new JsonSlurper()

def req =mockRequest.requestContent
def parsedReq = slurper.parseText(context.expand(req))
def cardNum = parsedReq.cardNum
def tranAmount = parsedReq.tranAmount
def deviceId = parsedReq.deviceId
requestContext.deviceId=deviceId
requestContext.cardNum=cardNum
requestContext.tranAmount=tranAmount</con:dispatchPath><con:response name="response" id="1e08d8a4-77b6-49b4-9b19-6e5a8969b640" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "phoneNumber": "1115555555",
    "cardNum": "${cardNum}",
    "tranAmount":"${tranAmount}",
    "deviceId": "${deviceId}",
    "returnMessage": "",
    "statusCode": 0,
    "channel": null
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="cancelSentMoney.json" method="POST" resourcePath="/cancelSentMoney.json" id="90a04206-20af-439b-9969-a678c5c42824"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.*

def slurper = new JsonSlurper()

def req =mockRequest.requestContent
def parsedReq = slurper.parseText(context.expand(req))
def referenceNum = parsedReq.referenceNum
def cancelPhoneNum = parsedReq.cancelPhoneNum
def deviceId = parsedReq.deviceId
requestContext.deviceId=deviceId
requestContext.referenceNum=referenceNum
requestContext.cancelPhoneNum=cancelPhoneNum

</con:dispatchPath><con:response name="response" id="a605f07f-c403-414f-8106-de4937a178a9" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "cancelPhoneNumber": "${cancelPhoneNum}",
    "referenceNum": "${referenceNum}",
    "phoneNumber": "1115555555",
    "deviceId": "${deviceId}",
    "returnMessage": "CepBank isleminiz iptal edilmistir. Islem tutari ve islem ucreti CepBank hesabiniza iade edilmistir.",    
    "statusCode": 0,
    "channel": null
}

</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="sendMoneyToPhone.json" method="POST" resourcePath="/sendMoneyToPhone.json" id="7949754e-e7b8-4537-a553-79dec7dcca36"><con:settings/><con:defaultResponse>response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.*

def slurper = new JsonSlurper()

def req =mockRequest.requestContent
def parsedReq = slurper.parseText(context.expand(req))
def targetPhoneNum = parsedReq.targetPhoneNum
def tranAmount = parsedReq.tranAmount
def deviceId = parsedReq.deviceId
requestContext.deviceId=deviceId
requestContext.targetPhoneNum=targetPhoneNum
requestContext.tranAmount=tranAmount
requestContext.returnMessage="Sayin musterimiz, "+targetPhoneNum+" nolu cep telefonuna hesabinizdan "+tranAmount+"  TL gonderilmistir. Islem referansiniz:1111111"</con:dispatchPath><con:response name="response" id="e003be18-71de-4998-94cc-901da368aed6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "phoneNumber": "1115555555",
    "targetPhoneNum": "${targetPhoneNum}",
    "tranAmount": ${tranAmount},
    "deviceId": "${deviceId}",
    "returnMessage": "${returnMessage}",
    "statusCode": 0,
    "channel": null
}
</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="cancelRequestedMoney.json" method="POST" resourcePath="/cancelRequestedMoney.json" id="a2b00d87-9f3d-497a-b5c3-2f2139c88e85"><con:settings/><con:defaultResponse>response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.*

def slurper = new JsonSlurper()

def req =mockRequest.requestContent
def parsedReq = slurper.parseText(context.expand(req))
def referenceNum = parsedReq.referenceNum
def cancelPhoneNum = parsedReq.cancelPhoneNum
def deviceId = parsedReq.deviceId
requestContext.deviceId=deviceId
requestContext.referenceNum=referenceNum
requestContext.cancelPhoneNum=cancelPhoneNum
requestContext.returnMessage="&lt;b>"+cancelPhoneNum+"&lt;/b>  telefon numarasindan gelen para isteme talebi iptal edilmistir."

</con:dispatchPath><con:response name="response" id="e24b2d71-f557-4a2f-83a1-89c0a7af90f2" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "cancelPhoneNumber": "${cancelPhoneNum}",
    "referenceNum": "${referenceNum}",
    "phoneNumber": "1115555555",
    "deviceId": "${deviceId}",
    "returnMessage": "${returnMessage}",
    "statusCode": 0,
    "channel": null
}
</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="confirmRequestedMoney.json" method="POST" resourcePath="/confirmRequestedMoney.json" id="87052898-1b46-4212-9250-81c96635f842"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.*

def slurper = new JsonSlurper()

def req =mockRequest.requestContent
def parsedReq = slurper.parseText(context.expand(req))
def referenceNum = parsedReq.referenceNum
def deviceId = parsedReq.deviceId
requestContext.deviceId=deviceId
requestContext.referenceNum=referenceNum
log.info "num:"+referenceNum
</con:dispatchPath><con:response name="response" id="8201f913-56e2-4219-a78e-af7f89a98731" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent><![CDATA[{
    "referenceNum": "${referenceNum}",
    "phoneNumber": "1115555555",
    "deviceId": "${deviceId}",
    "returnMessage": "<b>(530) 555 5555</b> nolu cep telefonuna hesabinizdan <b>9,00 TL </b> gonderilmistir. Islem referansiniz <b>1111111</b>.",
    "statusCode": 0,
    "channel": null
}]]></con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="requestMoney.json" method="POST" resourcePath="/requestMoney.json" id="e09c8f08-32d6-47db-86ad-4a103ff98e7d"><con:settings/><con:defaultResponse>response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.*

def slurper = new JsonSlurper()

def req =mockRequest.requestContent
def parsedReq = slurper.parseText(context.expand(req))
def requestType = parsedReq.requestType
def tarPhone = parsedReq.requestInfo.tarPhone
def tranAmnt=parsedReq.requestInfo.tranAmnt
def deviceId = parsedReq.deviceId
requestContext.deviceId=deviceId
requestContext.tarPhone=tarPhone
requestContext.tranAmnt=tranAmnt
requestContext.requestType=requestType</con:dispatchPath><con:response name="response" id="c5525252-ed33-4a0f-9c65-f6726e2d373f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "requestType": "${requestType}",
    "requestInfo": {
        "tarPhone": "${tarPhone}",
        "refNum": "1111111",
        "tranAmnt": ${tranAmnt},
        "stat": null
    },
    "phoneNumber": "1115555555",
    "deviceId": "${deviceId}",
    "returnMessage": "",
    "statusCode": 0,
    "channel": null
}
</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="market.json" method="POST" resourcePath="/market.json" id="e04d1d46-869f-4440-802c-e198cabcdd52"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="response" id="f536577b-a0e1-488b-943e-f8f7f1532b21" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "marketList": [
        {
            "symbol": "XU100",
            "desc": "BIST 100",
            "last": "72.536",
            "pernc": "0,67",
            "pernc_number": "0.67",
            "last_mod": "09.09.2015 13:42:30"
        },
        {
            "symbol": "KUSD",
            "desc": "USD",
            "last": "3,0145",
            "pernc": "0,00",
            "pernc_number": "0.00",
            "last_mod": "09.09.2015 13:56:43"
        },
        {
            "symbol": "KEUR",
            "desc": "EURO",
            "last": "3,3605",
            "pernc": "-0,33",
            "pernc_number": "-0.33",
            "last_mod": "09.09.2015 13:56:34"
        },
        {
            "symbol": "KBP",
            "desc": "GBP",
            "last": "4,6318",
            "pernc": "-0,15",
            "pernc_number": "-0.15",
            "last_mod": "09.09.2015 13:56:43"
        },
        {
            "symbol": "EUR",
            "desc": "EURO / USD",
            "last": "1,1153",
            "pernc": "-0,43",
            "pernc_number": "-0.43",
            "last_mod": "09.09.2015 13:58:55"
        },
        {
            "symbol": "REPO1",
            "desc": "O/N Repo",
            "last": "9,67",
            "pernc": "0",
            "pernc_number": "0.00",
            "last_mod": ""
        },
        {
            "symbol": "KGC",
            "desc": "Altin",
            "last": "108,431",
            "pernc": "-0,06",
            "pernc_number": "-0.06",
            "last_mod": "09.09.2015 13:57:39"
        },
        {
            "symbol": "NASDAQ",
            "desc": "NASDAQ",
            "last": "4.811,93",
            "pernc": "2,73",
            "pernc_number": "2.73",
            "last_mod": "08.09.2015 23:00:01"
        }
    ]
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="qrwithdrawmoney.json" method="POST" resourcePath="/qrwithdrawmoney.json" id="dc4ccaff-4658-4989-a9a2-b84e57c5b3b9"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.*

def slurper = new JsonSlurper()

def req =mockRequest.requestContent
def parsedReq = slurper.parseText(context.expand(req))
def tranAmount = parsedReq.tranAmount
def deviceId = parsedReq.deviceId
requestContext.deviceId=deviceId
requestContext.tranAmount=tranAmount
requestContext.returnMessage="Sayin musterimiz, "+tranAmount+" TL'lik baslattiginiz para cekme islemine Paramatik uzerinden devam edebilirsiniz."
</con:dispatchPath><con:response name="response" id="95f9b73d-8de4-4877-bd63-d24946d2b51b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "deviceId": "${deviceId}",
    "returnMessage": "${returnMessage}",
    "statusCode": 0,
    "channel": null
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="gsmTLTopUpFromAccount.json" method="POST" resourcePath="/gsmTLTopUpFromAccount.json" id="89ac57da-b607-4491-9e62-703cfb660be6"><con:settings/><con:defaultResponse>response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.*

def slurper = new JsonSlurper()

def req =mockRequest.requestContent
def parsedReq = slurper.parseText(context.expand(req))
def targetOperator = parsedReq.targetOperator
def targetPhoneNum = parsedReq.targetPhoneNum
def tranAmount = parsedReq.tranAmount
def deviceId = parsedReq.deviceId
requestContext.deviceId=deviceId
requestContext.targetOperator=targetOperator
requestContext.targetPhoneNum=targetPhoneNum
requestContext.tranAmount=tranAmount
requestContext.returnMessage=targetPhoneNum+" nolu cep telefonuna "+tranAmount+" TL yuklenmistir. Garanti Bankasi"
</con:dispatchPath><con:response name="response" id="650c82bd-eae4-484d-a1da-64b2a9c11a33" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "phoneNumber": "1115555555",
    "targetPhoneNum": "${targetPhoneNum}",
    "targetOperator": "${targetOperator}",
    "tranAmount": ${tranAmount},
    "deviceId": "${deviceId}",
    "returnMessage": "${returnMessage}",
    "statusCode": 0,
    "channel": null
}


</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Max-Age</con:name><con:value>3628800</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation><ProjectSpecificExposureList>null###null</ProjectSpecificExposureList></con:sensitiveInformation></con:soapui-project>